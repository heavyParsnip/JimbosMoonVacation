[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Add new colors for Reverse and Lunar cards
[[patches]]
[patches.pattern]
target = "globals.lua"
pattern = "RENTAL = HEX('b18f43'),"
position = 'after'
match_indent = true
payload = '''
    REVERSE = HEX('a61a20'),
    LUNAR = HEX('5b5f8b'),
'''

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "legendary = G.C.RARITY[4],"
position = 'after'
match_indent = true
payload = '''
    reverse = G.C.REVERSE,
    lunar = G.C.LUNAR,
'''

# Add reverse tarot upgrade tracking
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
        probabilities = {
            normal = 1,
        },
'''
position = 'after'
match_indent = true
payload = '''
        reverse_upgrades = {
            lucky = 0,
            mult = 0,
            bonus = 0,
            wild = 0,
            steel = 0,
            glass = 0,
            gold = 0,
            stone = 0,
        },
'''
times = 1

# Factor in reverse magician upgrades & show in UI
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/5 then"
position = 'at'
match_indent = true
payload = "if pseudorandom('lucky_mult') < (G.GAME.probabilities.normal+G.GAME.reverse_upgrades.lucky)/5 then"

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom('lucky_money') < G.GAME.probabilities.normal/15 then"
position = 'at'
match_indent = true
payload = "if pseudorandom('lucky_money') < (G.GAME.probabilities.normal+G.GAME.reverse_upgrades.lucky)/15 then"

[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = '''elseif _c.effect == 'Lucky Card' then loc_vars = \{G.GAME.probabilities.normal'''
position = 'after'
payload = '''+G.GAME.reverse_upgrades.lucky'''

# Reverse empress upgrades
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
        return self.ability.mult
    end
'''
position = 'before'
match_indent = true
payload = '''
        if self.ability.effect == "Mult Card" then
            return self.ability.mult + (G.GAME.reverse_upgrades.mult*3)
        end
'''

[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = '''if _c.effect == 'Mult Card' then loc_vars = \{'''
position = 'after'
payload = '''(G.GAME.reverse_upgrades.mult*3)+'''

# Reverse hierophant upgrades
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
 return self.base.nominal + self.ability.bonus + (self.ability.perma_bonus or 0)
'''
position = 'before'
match_indent = true
payload = '''
if self.ability.effect == "Bonus Card" then
    return self.base.nominal + self.ability.bonus + (G.GAME.reverse_upgrades.bonus*20) + (self.ability.perma_bonus or 0)
end
'''

[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = '''localize\{type = 'other', key = 'card_extra_chips', nodes = desc_nodes, vars = \{\(\(specific_vars and specific_vars.bonus_chips'''
position = 'after'
payload = '''+(G.GAME.reverse_upgrades.bonus*20)'''

# Reverse chariot upgrades
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
        return self.ability.h_x_mult
    end
'''
position = 'before'
match_indent = true
payload = '''
        if self.ability.effect == "Steel Card" then
            return self.ability.h_x_mult + (G.GAME.reverse_upgrades.steel*0.25)
        end
'''

[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = '''elseif _c.effect == 'Steel Card' then loc_vars = \{'''
position = 'after'
payload = '''(G.GAME.reverse_upgrades.steel*0.25)+'''

# Reverse justice upgrades
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
    if self.ability.x_mult <= 1 then return 0 end
'''
position = 'before'
match_indent = true
payload = '''
        if self.ability.effect == "Glass Card" then
            return self.ability.x_mult + (G.GAME.reverse_upgrades.glass*0.5)
        end
'''

[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = '''elseif _c.effect == 'Glass Card' then loc_vars = \{'''
position = 'after'
payload = '''(G.GAME.reverse_upgrades.glass*0.5)+'''

# Reverse devil upgrades
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
    if self.ability.h_dollars > 0 then
        ret.h_dollars = self.ability.h_dollars
'''
position = 'after'
match_indent = true
payload = '''
        if self.ability.effect == "Gold Card" then
            ret.h_dollars = ret.h_dollars + (G.GAME.reverse_upgrades.gold*4)
        end
'''

[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = '''elseif _c.effect == 'Gold Card' then loc_vars = \{'''
position = 'after'
payload = '''(G.GAME.reverse_upgrades.gold*4)+'''

# Reverse tower upgrades
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
        return self.ability.bonus + (self.ability.perma_bonus or 0)
'''
position = 'at'
match_indent = true
payload = '''
        return self.ability.bonus + (self.ability.perma_bonus or 0) + (G.GAME.reverse_upgrades.stone*30)
'''

[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = '''elseif _c.effect == 'Stone Card' then loc_vars = \{\(\(specific_vars and specific_vars.bonus_chips'''
position = 'after'
payload = '''+(G.GAME.reverse_upgrades.stone*30)'''

# Reverse lovers upgrades (placeholder effect)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
function Card:get_chip_x_mult(context)
    if self.debuff then return 0 end
    if self.ability.set == 'Joker' then return 0 end
'''
position = 'after'
match_indent = true
payload = '''
    if self.ability.effect == "Wild Card" then
        return self.ability.x_mult + (G.GAME.reverse_upgrades.wild*0.5)
    end
'''